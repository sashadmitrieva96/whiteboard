#!/usr/bin/env node

const fs = require('fs');
const util = require('util');
const argv = require('yargs')
  .usage(`Usage: whiteboard <optional: [-g, -a, -p]> <filename>
    use '-help' for more information on whiteboard commands`)
  .help(`Options: -g: view generated code
                  -a: analyze code
                  -p: show abstract syntax tree generated by code`)
  .argv;

const parse = require('./parser/parser.js');


require('./backend/javascript-generator.js');

/* eslint-enable no-unused-vars */

// If you change this code, make sure you run 'npm install -g' after you save
if (/(whiteboard.js)$/.test(process.argv[1])) {


  /* Suggestion: As a convention for adding command line operations, we should
     write a function that contains the functionality of the option then call
     the function in optionTable. It makes for nice clean code! */

  const runAll = (program) => {
    program.analyze();
    program.gen();
  };

  const parseIt = (program) => {
    console.log('Abstract Syntax Tree: \n', program.toString());
  };

  const analyze = (program) => {
    program.analyze();
    console.log('Semantic analyzer returned: ', util.inspect(program, { depth: null }));
  };

  const generate = (program) => {
    program.analyze();
    console.log('\nJS Program Generated: \n');
    program.gen();
  };


  const optionTable = {
    p: program => parseIt(program),
    a: program => analyze(program),
    g: program => generate(program),
  };

  const fileName = argv.g || argv.a || argv.p || argv._[0];

  // Check if input file is .wb
  if (!/(\.wb)$/.test(fileName)) {
    throw new Error(argv.usage);
  }

  const getFucntion = () => {
    if (argv.g) {
      return optionTable.g;
    } else if (argv.a) {
      return optionTable.a;
    } else if (argv.p) {
      return optionTable.p;
    } else {
      return runAll;
    }
  }

  const compile = getFucntion();
  const file = fs.readFileSync(fileName, 'utf8');

  const program = parse(file);

  // This line of code makes .wb code into .js code!
  // Run 'whiteboard hello.wb'
  compile(program);
}
