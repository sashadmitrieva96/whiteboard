WhiteBoard  {

  Program     =  Statement*

  Statement   =  If                                         --if
              |  For                                        --for
              |  Return                                     --ret
              |  Decl                                       --decl
              |  Break                                      --break
              |  Exp                                        --exp

  Decl        =  FunDecl                                    --fun
              |  ObjDecl                                    --obj
              |  type? Exp ("=" Exp)?                       --norm
  FunDecl     =  type? id "=" Param ":" Block

  ObjDecl     =  "Type" id "=" Param ":" Block

  Dict        =  Exp ":" Exp

  Return      =  "return" Exp
  Break       =  "break"
  For         =  "for" id "in" Exp ":" Block

  If          =  "if" Exp ":" Block
                 ("else" "if" Exp ":" Block)*
                 ("else" ":" Block)?


  Block       =  Statement* "."

  Exp         =  And
  Param       =  "(" (SParam ("," SParam)*)?  ")"

  SParam      =  Dict                                       --Dict
              |  type id                                    --type
              |  id                                         --notype


  Args        =  "(" (Exp ("," Exp)*)?  ")"                 --exp
              |  "(" (Dict ("," Dict)*)?  ")"              --named
  Access      =  "." id                                    --lit
              |  "[" Exp "]"                                --exp

  And         =  And "and" Or                              --bin
              |  Or
  Or          =  Or "or" Rel                               --bin
              |  Rel
  Rel         =  Term relop Term                           --bin
              |  Term

  Term        =  Term addop Fact                           --bin
              |  Fact
  Fact        =  Fact  mulop Neg                         --bin
              |  Neg

  Neg         = negop Power                                  --neg
              | Power

  Power       =  Power powop Exp2                          --bin
              |  Exp2

  Exp2        =  Exp2 Args                                 --call
              |  Exp2 Access                               --acc
              |  Primary                                   --prim

  Primary     =  numlit | boolit | strlit | id
              |  "(" Exp ")"                               --exp


  type        =  upper(idrest)*

  numlit      =  digit+ ("." digit+)?                      --whole
              |  "." digit+                                --dec
  boolit      =  "true" | "false"
  strlit      =  "'" ( ~"'" any )* "'"



  boolop      =  "and" | "or"
  relop       =  ">=" | ">" | "<=" | "<" | "!=" | "=="
  negop       =  "-" | "!" | "not"

  powop       =  "**"
  mulop       =  "*" | "/" | "%"
  addop       =  "+" | "-"

  keyword     =  ("fun" | "for" | "in" | "return" | "break" | "or" | "and" | "if" | "else" | "mod" | "return") ~idrest


  id          =  ~keyword(letter)idrest*
  idrest      =  letter | digit

}
