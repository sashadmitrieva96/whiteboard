WhiteBoard  {

  Program     =  Statement*

  Statement   =  If                                         --if
              |  For                                        --for
              |  While                                      --while
              |  Return                                     --ret
              |  Decl                                       --decl
              |  Break                                      --break
              |  Exp                                        --exp


  Decl        =  ObjDecl                                    --obj
              |  FunDecl                                    --fun
              |  id ("=" Exp)                               --ass
              |  TypeTree id ("=" Exp)?                         --init

  ObjDecl     =  "Type" TypeTree "=" Param ":" Block
  FunDecl     =  TypeTree id "=" Param ":" Block

  Binding     =  Exp ":" Exp

  Return      =  "return" Exp?
  Break       =  "break"

  For         =  "for" id "in" Exp ":" Block

  If          =  "if" Exp ":" Block
                 ("else" "if" Exp ":" Block)*
                 ("else" ":" Block)?

  While       =  "while" Exp ":" Block

  Block       =  indent Statement* dedent

  Exp         =  And

  Param       =  "(" (SParam ("," SParam)*)? ("," "...")? ")"    --rest
              |  "(" (SParam ("," SParam)*)? ")"                 --norm

  SParam      =  TypeTree Primary_id                             --id
              |  Binding                                     --binding


  Args        =  "(" (SArg ("," SArg)*)?  ")"

  SArg        =  Binding                                    --order
              |  Exp                                        --named


  Access      =  "." id                                     --lit
              |  "[" Exp "]"                                --exp

  And         =  And "and" Or                              --bin
              |  Or
  Or          =  Or "or" Rel                               --bin
              |  Rel
  Rel         =  Term relop Term                           --bin
              |  Term

  Term        =  Term addop Fact                           --bin
              |  Fact
  Fact        =  Fact mulop Neg                            --bin
              |  Neg

  Neg         =  negop Power                               --neg
              |  Power

  Power       =  Power powop Exp2                          --bin
              |  Exp2

  Exp2        =  Exp2 Args                                 --call
              |  Exp2 Access                               --acc
              |  Primary                                   --prim

  Primary     =  numlit                                    --num
              |  boolit                                    --bool
              |  strlit                                    --str
              |  id                                        --id
              |  "(" Exp ")"                               --exp


  TypeTree    = type ("<" TypeTree ">")?

  type        =  ~keyword upper(idrest)*

  numlit      =  digit+ ("." digit+)?                      --whole
              |  "." digit+                                --dec
  boolit      =  "true" | "false"
  strlit      =  "'" ( ~"'" any )* "'"


  relop       =  ">=" | ">" | "<=" | "<" | "!=" | "=="

  addop       =  "+" | "-" | "^"
  mulop       =  "*" | "/" | "%" | "mod"

  negop       =  "-" | "!" | "not"
  powop       =  "**"
  indent      =  "⇨"
  dedent      =  "⇦"

  newline     =  "\n"+
  space      :=  " " | "\t" | "\n" | comment
  comment     = "#" (~"\n" any)* "\n"

  keyword     =  ( "not" | "true" | "false" | "Type" | "for" | "in" | "return" | "break" | "or" | "and" | "if" | "else" | "mod" | "return") ~idrest


  id          =  ~keyword letter idrest*
  idrest      =  letter | digit | "_"

}
